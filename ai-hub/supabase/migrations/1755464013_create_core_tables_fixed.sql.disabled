-- Clean core tables (vector-enabled) that do not overlap with 1755453800_create_core_schema.sql

-- Ensure pgvector is available under the extensions schema
CREATE SCHEMA IF NOT EXISTS extensions;
CREATE EXTENSION IF NOT EXISTS vector SCHEMA extensions;

-- Knowledge Base table with vector embeddings
CREATE TABLE IF NOT EXISTS knowledge_items (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  content TEXT,
  source_url TEXT,
  item_type TEXT, -- 'paper', 'article', 'prompt', 'template', 'note'
  tags JSONB DEFAULT '[]',
  embedding extensions.vector(1536), -- OpenAI embeddings
  is_favorite BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Hackathons table
CREATE TABLE IF NOT EXISTS hackathons (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  description TEXT,
  url TEXT,
  platform TEXT, -- 'devpost', 'hackerearth', 'mlh'
  start_date TIMESTAMP WITH TIME ZONE,
  end_date TIMESTAMP WITH TIME ZONE,
  prize_amount INTEGER,
  location TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- AI Companies & Startups
CREATE TABLE IF NOT EXISTS ai_companies (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  description TEXT,
  website TEXT,
  funding_stage TEXT,
  total_funding BIGINT,
  last_funding_date DATE,
  yc_batch TEXT,
  founders JSONB DEFAULT '[]',
  industry_tags JSONB DEFAULT '[]',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Job Market Data
CREATE TABLE IF NOT EXISTS job_market_data (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  role_title TEXT NOT NULL,
  company TEXT,
  location TEXT,
  salary_min INTEGER,
  salary_max INTEGER,
  experience_level TEXT,
  remote_friendly BOOLEAN,
  ai_related BOOLEAN DEFAULT TRUE,
  posted_date DATE,
  source TEXT, -- 'linkedin', 'indeed', 'glassdoor'
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- User Analytics
CREATE TABLE IF NOT EXISTS user_analytics (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  event_type TEXT, -- 'page_view', 'search', 'bookmark', 'download'
  event_data JSONB DEFAULT '{}',
  timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Prompt Library
CREATE TABLE IF NOT EXISTS prompt_library (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  title TEXT NOT NULL,
  prompt_text TEXT NOT NULL,
  category TEXT,
  tags JSONB DEFAULT '[]',
  usage_count INTEGER DEFAULT 0,
  is_public BOOLEAN DEFAULT FALSE,
  is_favorite BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Indexes
CREATE INDEX IF NOT EXISTS idx_knowledge_items_user_id ON knowledge_items(user_id);
CREATE INDEX IF NOT EXISTS idx_hackathons_start_date ON hackathons(start_date DESC);
CREATE INDEX IF NOT EXISTS idx_user_analytics_user_event ON user_analytics(user_id, event_type);
CREATE INDEX IF NOT EXISTS idx_user_analytics_timestamp ON user_analytics(timestamp DESC);

-- Vector similarity search index
CREATE INDEX IF NOT EXISTS knowledge_items_embedding_idx
  ON knowledge_items USING ivfflat (embedding vector_cosine_ops);

-- Enable Row Level Security (RLS)
ALTER TABLE knowledge_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE prompt_library ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_analytics ENABLE ROW LEVEL SECURITY;

-- RLS policies for knowledge items
DROP POLICY IF EXISTS "Users can only access their own knowledge items" ON knowledge_items;
CREATE POLICY "Users can only access their own knowledge items" ON knowledge_items
  FOR ALL USING ((select auth.uid()) = user_id)
  WITH CHECK ((select auth.uid()) = user_id);

-- RLS policies for prompt library
DROP POLICY IF EXISTS "Users can access their own prompts and public ones" ON prompt_library;
CREATE POLICY "Users can access their own prompts and public ones" ON prompt_library
  FOR SELECT USING ((select auth.uid()) = user_id OR is_public = TRUE);

DROP POLICY IF EXISTS "Users can only create their own prompts" ON prompt_library;
CREATE POLICY "Users can only create their own prompts" ON prompt_library
  FOR INSERT WITH CHECK ((select auth.uid()) = user_id);

DROP POLICY IF EXISTS "Users can only update their own prompts" ON prompt_library;
CREATE POLICY "Users can only update their own prompts" ON prompt_library
  FOR UPDATE USING ((select auth.uid()) = user_id)
  WITH CHECK ((select auth.uid()) = user_id);

DROP POLICY IF EXISTS "Users can only delete their own prompts" ON prompt_library;
CREATE POLICY "Users can only delete their own prompts" ON prompt_library
  FOR DELETE USING ((select auth.uid()) = user_id);

-- RLS policies for user analytics
DROP POLICY IF EXISTS "Users can only access their own analytics" ON user_analytics;
CREATE POLICY "Users can only access their own analytics" ON user_analytics
  FOR ALL USING ((select auth.uid()) = user_id)
  WITH CHECK ((select auth.uid()) = user_id);